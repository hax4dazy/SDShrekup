<!-- Copyright (c) 2018 noahc3
   - This Source Code Form is subject to the terms of the Mozilla Public
   - License, v. 2.0. If a copy of the MPL was not distributed with this
   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
@page  "/console"

@inject IJSRuntime jsRuntime
@inject HttpClient Http
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inject ClipboardService clipboard


@if (!gettingZip) {

    <div>

        <BSAlert Color="Color.Info">
            Want to hack your Switch but not sure what to do? Check out the official SDSetup guide: <a href="https://switch.homebrew.guide">https://switch.homebrew.guide</a>
        </BSAlert>

        <h1 style="text-align:center">@G.manifest.Platforms[G.consoleId].Name</h1>

        @if (zipDoneMessage == true) {
            <BSAlert Color="Color.Success">
                <a href="javascript:void(0);" style="position:absolute;right:1rem;top:1rem;margin-left:auto;margin-right:0" @onclick="@(() => zipDoneMessage = false)"><span class="iconify" data-icon="fe:close" data-inline="false" data-width="1.5rem" data-height="1.5rem"></span></a>
                <h3 style="margin-top:1rem">ZIP Ready</h3>
                Your ZIP file should download within the next few seconds!
            </BSAlert>
        }

        @if (firefoxMessage == true) {
            <BSAlert Color="Color.Success">
                <a href="javascript:void(0);" style="position:absolute;right:1rem;top:1rem;margin-left:auto;margin-right:0" @onclick="@(() => firefoxMessage = false)"><span class="iconify" data-icon="fe:close" data-inline="false" data-width="1.5rem" data-height="1.5rem"></span></a>
                <h3 style="margin-top:1rem">Firefox Notice</h3>
                Your Firefox is outdated and has some issues. Do the following to get your ZIP:
                <ol>
                    <li>Copy the following URL: <b>@blobUrl</b></li>
                    <li>Open a new tab (do not use this tab!)</li>
                    <li>Paste the copied URL into the address bar.</li>
                </ol>
                You can avoid this in the future by updating Firefox to version 64 or higher.
            </BSAlert>
        }

        @if (saveMessage) {
            <BSAlert Color="Color.Success">
                <a href="javascript:void(0);" style="position:absolute;right:1rem;top:1rem;margin-left:auto;margin-right:0" @onclick="@(() => saveMessage = false)"><span class="iconify" data-icon="fe:close" data-inline="false" data-width="1.5rem" data-height="1.5rem"></span></a>
                <h3 style="margin-top:1rem">Want to redownload in the future?</h3>
                Save the following URL somewhere to immediately have the same packages pre-selected in the future:
                <BSTable IsResponsive="true" IsSmall="true" IsStriped="true" IsBordered="true">
                    <tbody>
                        <BSTableRow>
                            <BSTableHeadCell scope="row">@saveUrl</BSTableHeadCell>
                        </BSTableRow>
                    </tbody>
                </BSTable>
                <BSButton Color="Color.Danger" @onclick="(async e => await clipboard.WriteTextAsync(saveUrl))">Copy to Clipboard</BSButton>
            </BSAlert>
        }

        @if (selectMore) {
            <BSAlert Color="Color.Danger">
                <a href="javascript:void(0);" style="position:absolute;right:1rem;top:1rem;margin-left:auto;margin-right:0" @onclick="@(() => selectMore = false)"><span class="iconify" data-icon="fe:close" data-inline="false" data-width="1.5rem" data-height="1.5rem"></span></a>
                <h3 style="margin-top:0">No packages are selected</h3>
            </BSAlert>
        }

        @if (!G.initialized) {
            <h2>Page is loading, please wait...</h2>
        } else {

            <BSCard CardType="CardType.Card">
                <BSCard CardType="CardType.Body">
                    <h3 style="margin-bottom:0.5em">Pre-configured bundles</h3>
                    <BSCard CardType="CardType.Deck" Class="justify-content-center">
                        @foreach (Bundle b in G.manifest.Platforms[G.consoleId].Bundles) {
                            <BSCard style="margin-bottom:2rem">
                                <BSCard CardType="CardType.Body">
                                    <BSCard CardType="CardType.Title">@b.Name</BSCard>
                                    @b.Description
                                </BSCard>
                                <BSButton Color="Color.Danger" style="margin:1.2rem;margin-top:0;width:auto;" @onclick="@(() => G.SelectByList(b.Packages))">Select</BSButton>
                            </BSCard>
                        }
                    </BSCard>
                </BSCard>
            </BSCard>

            <br />

            @foreach (PackageSection sec in G.manifest.Platforms[G.consoleId].PackageSections.Values) {
                @if (G.CanShow(sec.Visible, sec.When, sec.WhenMode)) {
                    <UIPackageSection Section="@sec"></UIPackageSection>
                }
            }

            <BSButton Color="Color.Danger" IsBlock="true" @onclick="@(() => downloadZip())">Download your ZIP</BSButton>
        }

    </div>
} else {
    <div class="ui active dimmer" style="height:100vh;width:100vw;position:absolute;margin:0;top:0;left:0;right:0;bottom:0">
        <div class="ui massive text loader">
            <div id="infoh" style="margin-bottom:2rem">Building your ZIP, please wait...</div>
        </div>
        <BSAlert style="width:90%;position:absolute;bottom:5%" Color="Color.Danger">This might take a while. If the progress stalls for more than a minute, please report it on <a href="https://github.com/noahc3/SDSetup/issues">GitHub</a></BSAlert>
    </div>
}



@functions {

    private static bool localInitialized = false;

    public static Action ForceUiRefresh;

    public static bool gettingZip = false;

    private static bool zipDoneMessage = false;
    private static bool firefoxMessage = false;
    private static bool saveMessage = false;
    private static bool selectMore = false;

    private static List<string> gottenPackages;

    private static bool b = false;

    private static string blobUrl = "";
    private static string saveUrl = "";

    private static List<string> preenabled;

    static int total = 3;
    static int current = 0;
    static bool barMode = true;

    protected override void OnInitialized() {
        string a = UriHelper.Uri.Split('?')[1];
        if (a.Contains('#')) a = a.Split('#')[0];
        G.consoleId = a;
        Shared.MainLayout.ForceUiRefresh();
        if (localInitialized == false) {
            if (!G.selectedPackages.ContainsKey(G.consoleId)) G.selectedPackages[G.consoleId] = new Dictionary<string, bool>();
            if (!G.manifest.Platforms.ContainsKey(G.consoleId)) UriHelper.NavigateTo("");
        }
    }

    protected override async Task OnInitializedAsync() {
        UriHelper.LocationChanged += OnLocationChanged;
        ForceUiRefresh = new Action(() => { StateHasChanged(); });
        if (localInitialized == false) {
            localInitialized = true;
        }
    }

    private void OnLocationChanged(object sender, LocationChangedEventArgs e) {
        Console.WriteLine("[INFO] Caught URL change event: " + UriHelper.Uri);
        if (G.initialized) {
            if (UriHelper.Uri.Contains("/console?")) {
                zipDoneMessage = false;
                firefoxMessage = false;
                saveMessage = false;
                selectMore = false;
                string a = UriHelper.Uri.Split('?')[1];
                if (a.Contains('#')) a = a.Split('#')[0];
                G.consoleId = a;
                G.SelectByUrl(UriHelper.Uri);
                StateHasChanged();
                Shared.MainLayout.ForceUiRefresh();
            }

        }
    }



    private string SetConsoleId() {
        string a = UriHelper.Uri.Split('?')[1];
        if (a.Contains('#')) a = a.Split('#')[0];
        G.consoleId = a;
        return "";
    }

    private void checkClicked(string id) {
        G.selectedPackages[G.consoleId][id] = !G.selectedPackages[G.consoleId][id];
        StateHasChanged();
    }

    //TODO: Move this to package

    private void RecursivelyFindDependencies(Package p) {
        if (!gottenPackages.Contains(p.ID)) {
            gottenPackages.Add(p.ID);
        }
        foreach (string k in p.Dependencies) RecursivelyFindDependencies(G.packages[G.consoleId][k]);
    }

    [JSInvokable]
    public static void AddProgress() {
        current++;
        ForceUiRefresh();
    }

    // due to many issues, this has to go here and not in global :/
    private async void downloadZip() {

        gettingZip = true;
        zipDoneMessage = false;
        firefoxMessage = false;
        saveMessage = false;
        selectMore = false;
        current = 0;

        gottenPackages = new List<string>();

        foreach (KeyValuePair<string, bool> k in G.selectedPackages[G.consoleId]) {
            if (k.Value && G.CanDownload(G.packages[G.consoleId][k.Key].When, G.packages[G.consoleId][k.Key].WhenMode)) {
                //finalArtifacts.AddRange(getArtifacts(G.packages[G.consoleId][k.Key]));
                RecursivelyFindDependencies(G.packages[G.consoleId][k.Key]);
            }
        }

        if (gottenPackages.Count == 0) {
            selectMore = true;
            gettingZip = false;
            StateHasChanged();
            await ZipHelpers.ScrollToTop(jsRuntime);
        }

        gottenPackages = gottenPackages.OrderBy(x => G.packages[G.consoleId][x].Priority).ToList();

        string packages = "";
        foreach (string k in gottenPackages) {
            packages += k + ";";
        }

        string uuid = Guid.NewGuid().ToString().Replace("-", "").ToLower();

        saveUrl = UriHelper.BaseUri + "console?" + G.consoleId + "#" + packages;
        string getUrl = G.hostname + "/api/v1/fetch/zip";


        HttpClient client = new HttpClient();
        client.Timeout = TimeSpan.FromSeconds(120);
        HttpResponseMessage resp;
        try {
            HttpRequestMessage message = new HttpRequestMessage {
                Method = HttpMethod.Get,
                RequestUri = new Uri(getUrl),
                Headers = {
                        { "SDSETUP-UUID", uuid },
                        { "SDSETUP-PACKAGESET", G.packageset },
                        { "SDSETUP-CHANNEL", G.channel },
                        { "SDSETUP-PACKAGES", packages }
                    }
            };


            resp = await client.SendAsync(message);
        } catch (Exception e) {
            Console.WriteLine("[ERROR] Failed to retrieve bundle: \n" + e.Message + "\n\n" + e.StackTrace);
            Shared.MainLayout.downloadFailed = true;
            gettingZip = false;
            StateHasChanged();
            Shared.MainLayout.ForceUiRefresh();
            return;
        }
        if (!resp.IsSuccessStatusCode) {
            if ((int)resp.StatusCode == 429) {
                Shared.MainLayout.rateLimited = true;
                gettingZip = false;
                Shared.MainLayout.ForceUiRefresh();
                StateHasChanged();
                return;
            } else {
                Shared.MainLayout.downloadFailed = true;
                gettingZip = false;
                Shared.MainLayout.ForceUiRefresh();
                StateHasChanged();
                return;
            }
        }
        string tresp = await resp.Content.ReadAsStringAsync();
        if (tresp == "READY") {
            UriHelper.NavigateTo(G.hostname + "/api/v1/fetch/generatedzip/" + uuid);

            saveMessage = true;
            gettingZip = false;
            StateHasChanged();
        } else {
            Console.WriteLine("[ERROR] Bundle was never ready: " + tresp);
        }


    }

    private string UUID() {
        return new Guid().ToString();
    }

    private async void GetZip(string getUrl) {
        using (HttpClientDownloadWithProgress client = new HttpClientDownloadWithProgress(getUrl, "bundle.zip")) {

            client.ProgressChangedAction = new Action(() => {
                total = 100;
                current = client.percentage;
                barMode = false;
                StateHasChanged();
            });

            await client.StartDownload();
        }
    }


}
